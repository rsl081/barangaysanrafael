{"remainingRequest":"C:\\Users\\Rsl\\Downloads\\VuetifyProject\\barangay-sanrafael\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\Rsl\\Downloads\\VuetifyProject\\barangay-sanrafael\\src\\views\\dashboard\\component\\Tabs.vue?vue&type=template&id=34a0eae5&","dependencies":[{"path":"C:\\Users\\Rsl\\Downloads\\VuetifyProject\\barangay-sanrafael\\src\\views\\dashboard\\component\\Tabs.vue","mtime":1580387978000},{"path":"C:\\Users\\Rsl\\Downloads\\VuetifyProject\\barangay-sanrafael\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\Rsl\\Downloads\\VuetifyProject\\barangay-sanrafael\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":499162500000},{"path":"C:\\Users\\Rsl\\Downloads\\VuetifyProject\\barangay-sanrafael\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\Rsl\\Downloads\\VuetifyProject\\barangay-sanrafael\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}